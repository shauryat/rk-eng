import React from 'react';
var FlexContext = React.createContext(undefined);
var GutterContext = React.createContext(undefined);
export var FlexProvider = FlexContext.Provider;
export var GutterProvider = GutterContext.Provider;
export var positionInsideRow = function positionInsideRow(position) {
  if (position === 'left') return undefined;
  if (position === 'right') return {
    marginLeft: 'auto'
  };
  if (position === 'top') return {
    alignSelf: 'flex-start'
  };
  if (position === 'bottom') return {
    alignSelf: 'flex-end'
  };
  if (position === 'middle') return {
    alignSelf: 'center'
  };
  if (position === 'center') return {
    alignSelf: 'center',
    marginLeft: 'auto',
    marginRight: 'auto'
  };
};
export var positionInsideColumn = function positionInsideColumn(position) {
  if (position === 'left') return {
    alignSelf: 'flex-start'
  };
  if (position === 'right') return {
    alignSelf: 'flex-end'
  };
  if (position === 'top') return undefined;
  if (position === 'bottom') return {
    marginTop: 'auto'
  };
  if (position === 'middle') return {
    marginTop: 'auto',
    marginBottom: 'auto'
  };
  if (position === 'center') return {
    alignSelf: 'center',
    marginTop: 'auto',
    marginBottom: 'auto'
  };
};
export var gutterInsideRow = function gutterInsideRow(value) {
  return {
    pl: value
  };
};
export var gutterInsideColumn = function gutterInsideColumn(value) {
  return {
    pt: value
  };
};
export var useGutterCtx = function useGutterCtx() {
  return React.useContext(GutterContext);
};
export var useGutterProps = function useGutterProps(itemIndex) {
  var flex = React.useContext(FlexContext);
  var gutter = React.useContext(GutterContext);

  if (itemIndex) {
    if (flex === 'row') return gutterInsideRow(gutter);
    if (flex === 'column') return gutterInsideColumn(gutter);
  }
};
export var useFlexCtx = function useFlexCtx() {
  return React.useContext(FlexContext);
};
export var useFlexStyles = function useFlexStyles(position) {
  var flex = React.useContext(FlexContext);
  if (flex === 'row') return positionInsideRow(position);
  if (flex === 'column') return positionInsideColumn(position);
};
export var Provider = function Provider(_ref) {
  var flexDirection = _ref.flexDirection,
      gutter = _ref.gutter,
      children = _ref.children;
  var inheritedGutter = useGutterCtx();
  return /*#__PURE__*/React.createElement(FlexProvider, {
    value: flexDirection
  }, /*#__PURE__*/React.createElement(GutterProvider, {
    value: gutter === 'inherit' ? inheritedGutter : gutter
  }, React.Children.map(children, function (child, index) {
    if (React.isValidElement(child)) {
      return React.cloneElement(child, {
        'data-flexindex': index
      });
    }

    return child;
  })));
};